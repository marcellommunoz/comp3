PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    
    Karloff parser = new Karloff(new FileInputStream(args[0]));
    parser.Karloff();
  }

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <FUNC: "func">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <VOID: "void">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <REPEAT: "repeat">
| <RETURN: "return">
| <UNTIL: "until">
| <OUTPUT: "System.output">
| <NEWVAR: "newVar">
}

TOKEN :
{
 <OP: ("+" | "-" | "*" | "/" | "&" | "|" | "<" | ">" | "==")>
|< TIPO: ("int" | "bool")>
|< TRUE: ("true")>
|< FALSE: ("false")>
|< PONTO_VIRGULA: (";")>
|< VIRGULA: (",")>
|< IGUAL: ("=")>
|< DIGITO: (["0"-"9"])>
|< NUMLIT: ["0"-"9"] ( ["0"-"9"])* ("."(["0"-"9"])+)? ("e"(["0"-"9"])+)?>
|< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_")*>

}



void Karloff () :
{}
{ 

  Main() 
  (Func())?
  <EOF> 
}
	

void Main ():
{}
{
 <VOID><MAIN> <ACHAVES> 
 
 	VarDecl()
	SeqComandos()

 <FCHAVES>

}
void VarDecl() :
{}
{ 
	(AuxDecl())*
}

void AuxDecl() :
{}
{ 
	<NEWVAR>
	<TIPO>
	<ID>
	<PONTO_VIRGULA>
}

void SeqComandos() :
{}
{ 
	(Comando())*
}

void Comando() :
{}
{ 
	<ID> ComandoLookahead()
| 	<IF> <APARENTESES> Exp() <FPARENTESES> <THEN> <ACHAVES> SeqComandos() <FCHAVES>  <PONTO_VIRGULA>
| 	<WHILE> <APARENTESES> Exp() <FPARENTESES> <ACHAVES> SeqComandos() <FCHAVES> <PONTO_VIRGULA>
| 	<REPEAT> <ACHAVES> SeqComandos() <FCHAVES> <UNTIL> <APARENTESES> Exp() <FPARENTESES> <PONTO_VIRGULA>
| 	<RETURN> Exp() <PONTO_VIRGULA>
| 	<OUTPUT> <APARENTESES> Exp() <FPARENTESES> <PONTO_VIRGULA>
}

void ComandoLookahead() :
{}
{
	<IGUAL> Exp() <PONTO_VIRGULA>
|	<ACHAVES> (ListaExp())? <FCHAVES> <PONTO_VIRGULA>
}

void Exp() :
{}
{ 
	<APARENTESES> Exp() <OP> Exp() <FPARENTESES>
| 	Fator()
}

void Fator() :
{}
{ 
	<ID> FatorLookahead()
|	<NUMLIT>
|	<TRUE>
|	<FALSE>
}

void FatorLookahead() :
{}
{
	(<APARENTESES> (ListaExp())? <FPARENTESES>)?
}

void ListaExp() :
{}
{ 
	Exp() AuxListaExp()
}

void AuxListaExp() :
{}
{
	(<VIRGULA> Exp())*
}

void Func() :
{}
{ 
	<FUNC> <TIPO> <ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> VarDecl() <FCHAVES> AuxFunc()
}

void AuxFunc() :
{}
{
	(<FUNC> <TIPO> <ID> <APARENTESES> (ListaArg())? <FPARENTESES> <ACHAVES> VarDecl() <FCHAVES>)*
}

void ListaArg() :
{}
{ 
	<TIPO> <ID> AuxListaArg()
}

void AuxListaArg() :
{}
{
	(<VIRGULA> <ID>)*
}


